geom_col(mapping = aes(x = city, y = num_killed), position = "dodge") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
p
plot_data <- shooting_data %>%
filter(
state == "California",
num_killed != 0
) %>%
select(city, num_killed)
p <- ggplot(data = plot_data) +
geom_col(mapping = aes(x = city, y = num_killed), position = "dodge") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
p
plot_data <- shooting_data %>%
filter(
state == "Illinois",
num_killed != 0
) %>%
select(city, num_killed)
p <- ggplot(data = plot_data) +
geom_col(mapping = aes(x = city, y = num_killed), position = "dodge") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
p
View(shooting_data)
plot_data_2 <- shooting_data %>%
group_by(city) %>%
summarise(total_incidents = n()) %>%
top_n(5)
plot_data_2
plot_data_2 <- shooting_data %>%
group_by(city) %>%
summarise(total_incidents = n()) %>%
top_n(5) %>%
select(city, total_incidents)
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = total_incidents), position = "dodge") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
p
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = total_incidents), position = "dodge") +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
coord_flip()
p
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = total_incidents), position = "dodge") +
scale_x_discrete(guide = guide_axis(n.dodge = 1)) +
coord_flip()
p
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = total_incidents), position = "dodge") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
p
plot_data_2 <- shooting_data %>%
group_by(city) %>%
summarise(Incidents = n()) %>%
top_n(5) %>%
select(city, Incidents)
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents), position = "dodge") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
p
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents), position = "dodge") +
theme(axis.text.x = element_text(size = 10))
p
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
ggtitle("Top Five Cities with most shootings")
p
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
ggtitle("Top five ities with most shootings")
p
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
ggtitle("Top five cities with most shootings")
p
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
ggtitle("Cities With Most Shootings")
p
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
labs(
title = "Cities With Most Shootings",
x = "City",
Y = "Shootings"
)
p
leaflet(data = most_killed) %>%
addTiles() %>%
setView(lng = -97.922211, lat = 39.381266, zoom = 4) %>%
addCircleMarkers(
lat = ~lat,
lng = ~long,
stroke = FALSE,
popup = ~paste(
"Date: ",
most_killed$date, "<br>",
"City: ",
most_killed$city, "<br>",
"Number Killed: ",
most_killed$num_killed, "<br>"
),
radius = ~radius,
fillOpacity = 0.5
)
Interactive_map <- leaflet(data = most_killed) %>%
addTiles() %>%
setView(lng = -97.922211, lat = 39.381266, zoom = 4) %>%
addCircleMarkers(
lat = ~lat,
lng = ~long,
stroke = FALSE,
popup = ~paste(
"Date: ",
most_killed$date, "<br>",
"City: ",
most_killed$city, "<br>",
"Number Killed: ",
most_killed$num_killed, "<br>"
),
radius = ~radius,
fillOpacity = 0.5
)
Interactive_map
Total_shootings <- nrow(shooting_data)
# How many lives were lost?
Lives_lost <- shooting_data %>%
summarize(total_lives = sum(num_killed > 0)) %>%
pull(total_lives)
# Which city was most impacted by shootings (make sure to clarify  how you are measuring "impact")?
#max killed, max injured
most_impacted <- shooting_data %>%
filter(num_killed == max(num_killed)) %>%
filter(num_injured == max(num_injured)) %>%
pull(city)
# City with most incidents
most_incidents <- shooting_data %>%
group_by(city) %>%
summarise(total_incidents = n()) %>%
filter(total_incidents == max(total_incidents)) %>%
pull(city)
# What proportion of mass shootings had zero deaths?
no_deaths <- shooting_data %>%
summarize(killed = sum(num_killed == 0), observations = n()) %>%
mutate(decimal_zero = round((killed / observations), digits = 2)) %>%
mutate(percent_zero = decimal_zero * 100) %>%
pull(percent_zero)
library(knitr)
setwd("C:/Users/wongb/a5-Brandon-Wong123")
shooting_data <- read.csv("data/shootings-2018.csv", stringsAsFactors = FALSE)
View(shooting_data)
library(dplyr)
# How many shootings occurred?
Total_shootings <- nrow(shooting_data)
# How many lives were lost?
Lives_lost <- shooting_data %>%
summarize(total_lives = sum(num_killed > 0)) %>%
pull(total_lives)
# Which city was most impacted by shootings (make sure to clarify  how you are measuring "impact")?
#max killed, max injured
most_impacted <- shooting_data %>%
filter(num_killed == max(num_killed)) %>%
filter(num_injured == max(num_injured)) %>%
pull(city)
# City with most incidents
most_incidents <- shooting_data %>%
group_by(city) %>%
summarise(total_incidents = n()) %>%
filter(total_incidents == max(total_incidents)) %>%
pull(city)
# What proportion of mass shootings had zero deaths?
no_deaths <- shooting_data %>%
summarize(killed = sum(num_killed == 0), observations = n()) %>%
mutate(decimal_zero = round((killed / observations), digits = 2)) %>%
mutate(percent_zero = decimal_zero * 100) %>%
pull(percent_zero)
# Of all of the observations, `r most_impacted` had the most deaths and victims injured.
# However, the city with the most mass shootings was `r most_incidents`. Of all of the mass shootings in the dataset only `r no_deaths` had no deaths.
## Summary Table
state_summary <- shooting_data %>%
group_by(state) %>%
summarize(Total_Deaths = sum(num_killed),
Total_Injured = sum(num_injured)) %>%
arrange(-Total_Deaths)
# accompanying Text
# For the shootings 2018 dataset,
# it is expected that the observation with the
# highest total deaths also has the highest injured.
# Another insight is that the there is no
# relation between region and states that are the most impacted.
# A important distinction is that observations
# with zero deaths are included in a state's total.
# Only 3 states had a zero deaths.
## Description of a particular incident
# Pompano Beach (Parkland) Flroida
# Date:
most_impacted_date <- shooting_data %>%
filter(num_killed == max(num_killed)) %>%
filter(num_injured == max(num_injured)) %>%
pull(date)
# Location:
Incident_state <- shooting_data %>%
filter(num_killed == max(num_killed)) %>%
filter(num_injured == max(num_injured)) %>%
pull(state)
Incident_city <- shooting_data %>%
filter(num_killed == max(num_killed)) %>%
filter(num_injured == max(num_injured)) %>%
pull(city)
# Total injured and killed
Total_impact <- shooting_data %>%
summarise(death_num == max(num_killed),
num_hurt == max(num_injured)) %>%
mutate(impact = death_num + num_hurt) %>%
pull(impact)
# One outside source
# Interactive Map:
# markers at location of shooting
# size of markers based on number killed/injured
# 3 pieces of info about incident with a line break (date, city, address)
library(leaflet)
map <- leaflet(shooting_data) %>%
addTiles()
# Incident sized proportionally to the number killed
most_killed <- shooting_data %>%
mutate(radius = (num_killed/max(num_killed) * 3)^2)
Interactive_map <- leaflet(data = most_killed) %>%
addTiles() %>%
setView(lng = -97.922211, lat = 39.381266, zoom = 4) %>%
addCircleMarkers(
lat = ~lat,
lng = ~long,
stroke = FALSE,
popup = ~paste(
"Date: ",
most_killed$date, "<br>",
"City: ",
most_killed$city, "<br>",
"Number Killed: ",
most_killed$num_killed, "<br>"
),
radius = ~radius,
fillOpacity = 0.5
)
#You should provide a defense of why you chose the visual encodings of the chart (i.e., you chose a layout to answer a specific question),
# and list at least 2 insights gained from the chart.
library("ggplot2")
plot_data_2 <- shooting_data %>%
group_by(city) %>%
summarise(Incidents = n()) %>%
top_n(5) %>%
select(city, Incidents)
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
labs(
title = "Cities With Most Shootings",
x = "City",
Y = "Shootings"
)
library(knitr)
source("analysis.R")
library(knitr)
library(knitr)
library(knitr)
setwd("C:/Users/wongb/a5-Brandon-Wong123")
shooting_data
library(dplyr)
state_summary <- shooting_data %>%
group_by(state) %>%
summarize(Deaths = sum(num_killed),
Injured = sum(num_injured)) %>%
arrange(-Deaths)
total_shootings <- nrow(shooting_data)
lives_lost <- shooting_data %>%
summarize(total_lives = sum(num_killed > 0)) %>%
pull(total_lives)
state_summary
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
lives_lost
total_shootings
most_impacted
Total_impact
injured_killed_num <- shooting_data %>%
summarise(death_num == max(num_killed),
num_hurt == max(num_injured)) %>%
mutate(impact = death_num + num_hurt) %>%
pull(impact)
injured_killed_num <- shooting_data %>%
summarize( death_num = max(num_killed),
num_hurt = max(num_injured)) %>%
mutate(impact = death_num + num_hurt) %>%
pull(impact)
injured_killed_num
state_summary
## Summary Table
state_summary <- shooting_data %>%
group_by(state) %>%
summarize(Deaths = sum(num_killed),
Injured = sum(num_injured),
observations = n()) %>%
arrange(-Deaths)
state_summary
## Summary Table
state_summary <- shooting_data %>%
group_by(state) %>%
summarize(Deaths = sum(num_killed),
Injured = sum(num_injured),
Incidents = n()) %>%
arrange(-Deaths)
state_summary
# Insight 1: City with most incidents
most_incidents <- shooting_data %>%
group_by(city) %>%
summarise(total_incidents = n()) %>%
filter(total_incidents == max(total_incidents)) %>%
pull(city)
most_incidents
most_impacted_date
Incident_city
injured_killed_num
incident_state <- shooting_data %>%
filter(num_killed == max(num_killed)) %>%
filter(num_injured == max(num_injured)) %>%
pull(state)
incident_city <- shooting_data %>%
filter(num_killed == max(num_killed)) %>%
filter(num_injured == max(num_injured)) %>%
pull(city)
library(ggplot2)
p
plot_data_2 <- shooting_data %>%
group_by(city) %>%
summarise(Incidents = n(),
total_num_injured = sum(num_injured),
total_num_deaths = sum(num_killed),
city_impact = total_num_injured + total_num_deaths) %>%
top_n(5) %>%
select(city, Incidents, city_impact)
plot_data_2
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents, fill = city_impact), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
labs(
title = "Cities With Most Shootings",
x = "City",
Y = "Shootings"
)
library(plotly)
ggploty(p)
ggplotly(p)
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents, fill = city_impact), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
labs(
title = "Cities With Most Shootings",
x = "City",
Y = "Shootings",
fill = "Impact"
)
ggplotly(p)
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents, fill = city_impact), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
labs(
title = "Cities With Most Shootings",
x = "City",
Y = "Shootings",
fill = "Impact"
) +
ggplotly(p)
ggplotly(p)
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents, fill = city_impact), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
labs(
title = "Cities With Most Shootings",
x = "City",
Y = "Shootings",
fill = "Impact"
)
plot_data_2 <- shooting_data %>%
group_by(city) %>%
summarise(Incidents = n(),
total_num_injured = sum(num_injured),
total_num_deaths = sum(num_killed),
Impact = total_num_injured + total_num_deaths) %>%
top_n(5) %>%
select(city, Incidents, Impact)
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents, fill = Impact), position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
labs(
title = "Cities With Most Shootings",
x = "City",
Y = "Shootings",
fill = "Impact"
)
library(styler)
style_file("analysis.R")
library(lintr)
lint("analysis.R")
p <- ggplot(data = plot_data_2) +
geom_col(mapping = aes(x = city, y = Incidents, fill = Impact),
position = "dodge") +
theme(axis.text.x = element_text(size = 10)) +
labs(
title = "Cities With Most Shootings",
x = "City",
Y = "Shootings",
fill = "Impact"
)
library(lintr)
lint("analysis.R")
lint("analysis.R")
setwd("C:/Users/wongb/final-project-aviraj2507/scripts")
#second chart
cali_hs_sat_zip_df <- read.csv("data/cali_hs_sat_zip.csv",
stringsAsFactors
= FALSE
)
#second chart
cali_hs_sat_zip_df <- read.csv("data/cali_hs_sat_zip.csv",
stringsAsFactors
= FALSE
)
setwd("C:/Users/wongb/final-project-aviraj2507/scripts")
#second chart
cali_hs_sat_zip_df <- read.csv("data/cali_hs_sat_zip.csv",
stringsAsFactors
= FALSE
)
setwd("~/")
setwd("C:/Users/wongb/final-project-aviraj2507/data")
#second chart
cali_hs_sat_zip_df <- read.csv("data/cali_hs_sat_zip.csv",
stringsAsFactors
= FALSE
)
setwd("C:/Users/wongb/final-project-aviraj2507")
#second chart
cali_hs_sat_zip_df <- read.csv("data/cali_hs_sat_zip.csv",
stringsAsFactors
= FALSE
)
cali_hs_sat_zip_df
View(cali_hs_sat_zip_df)
install.packages("shiny")
# Load the `shiny` package (install it in the R terminal if you haven't already)
library("shiny")
runApp('C:/Users/wongb/exercises-Brandon-Wong123/chapter-19-exercises/exercise-1')
runApp('C:/Users/wongb/exercises-Brandon-Wong123/chapter-19-exercises/exercise-1')
runApp('C:/Users/wongb/exercises-Brandon-Wong123/chapter-19-exercises/exercise-2')
runApp('C:/Users/wongb/exercises-Brandon-Wong123/chapter-19-exercises/exercise-1')
runApp('C:/Users/wongb/exercises-Brandon-Wong123/chapter-19-exercises/exercise-1')
library(dplyr)
library(ggplot2)
library(plotly)
setwd("C:/Users/wongb/exercises-Brandon-Wong123/chapter-16-exercises/exercise-2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
?diamonds
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1)
bar
setwd("C:/Users/wongb/final-project-aviraj2507")
bar <- ggplot(data = cali_hs_sat_zip_df) +
geom_bar(mapping = aes(x = sname, y = TotalSatScore,
fill = interaction(AvgScrRead, AvgScrMath, AvgScrWrite)),
position  = "dodge")
bar
bar chart
barchart()
melt()
install.packages("reshape")
library(reshape)
new <- melt(cali_hs_sat_zip_df)
new <- melt(cali_hs_sat_zip_df, id.vars = sname)
new <- melt(cali_hs_sat_zip_df, id.vars = "sname")
ggplot(new, aes(x = sname, y= TotalSatScore, fill = variable)) +
geom_bar(stat = "identity")
ggplot(new, aes(x = sname, y = TotalSatScore, fill = variable)) +
geom_bar(stat = "identity")
bar <- ggplot(data = cali_hs_sat_zip_df) +
geom_bar(mapping = aes(x = sname, y = TotalSatScore),
position  = "dodge")
bar
ggplot(new, aes(x = sname, y = TotalSatScore, fill = variable)) +
geom_bar(stat = 'identity')
ggplot(new, aes(x = sname, y = cali_hs_sat_zip_df$TotalSatScore, fill = variable)) +
geom_bar(stat = 'identity')
ggplot(new, aes(x = cali_hs_sat_zip_df$sname, y = cali_hs_sat_zip_df$TotalSatScore, fill = variable)) +
geom_bar(stat = 'identity')
barChart(AvgScrRead + AvgScrWrite + AvgScrMath)
barChart(AvgScrRead + AvgScrWrite + AvgScrMath ~sname, data = cali_hs_sat_zip_df)
install.packages("lattice")
install.packages("lattice")
